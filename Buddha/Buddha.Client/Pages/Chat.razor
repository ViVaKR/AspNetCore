@page "/chat"

@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>채팅</PageTitle>

<div class="flex flex-col gap-2 w-full items-center min-h-screen px-4">

    <div class="form-group">
        <input @bind="userInput"
               class="px-4 py-2 border border-slate-400 rounded-xl my-4" placeholder="이름" />
    </div>
    <div class="form-group">
        <input @bind="messageInput" size="50" class="px-4 py-2 border-slate-400 border rounded-lg" />
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)"
            class="border rounded-lg hover:bg-sky-400 hover:text-white border-slate-400 px-4 py-2">
        전송
    </button>

    <ul id="messagesList"
        class="flex flex-col w-[calc(100%_-_4rem)] px-4
            m-8
            h-[200px]
            gap-1 bg-amber-200
            overflow-hidden
            border rounded-lg">
        @foreach (var message in messages)
        {
            <li class="text-xl ">@message</li>
        }
    </ul>
</div>

@code {
    private HubConnection? hubConnection;
    private readonly List<string> messages = [];
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
