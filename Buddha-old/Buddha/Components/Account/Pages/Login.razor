@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Buddha.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>로그인</PageTitle>

<h1 class="text-center text-sky-500">로그인</h1>
<main class="flex flex-col">
    <section>
        <StatusMessage Message="@errorMessage"/>
        <EditForm
            Model="Input"
            method="post"
            OnValidSubmit="LoginUser"
            FormName="login">

            <div class="flex flex-col gap-2 w-full h-auto">
                <DataAnnotationsValidator/>
                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username"
                               aria-required="true" placeholder="name@example.com"/>
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password"
                               @bind-Value="Input.Password"
                               id="Input.Password"
                               class="form-control"
                               autocomplete="current-password"
                               aria-required="true"
                               placeholder="password"/>
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe"
                                       class="darker-border-checkbox form-check-input"/>
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 px-4 py-2 bg-sky-400 hover:bg-red-400 rounded-xl">
                        Log in
                    </button>
                </div>
                <div class="flex justify-around text-decoration-none text-slate-400">
                    <p>
                        <a href="Account/ForgotPassword"
                           class="text-decoration-none !text-slate-400">
                            Forgot your password?
                        </a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register
                            as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">
                            Resend email confirmation
                        </a>
                    </p>
                </div>
            </div>
        </EditForm>
    </section>
    <section>
        <h3>Use another service to log in.</h3>
        <hr/>
        <ExternalLoginPicker/>
    </section>
</main>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm] private InputModel Input { get; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new Dictionary<string, object?> { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}
